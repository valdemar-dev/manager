// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


//
// ROOT USER
//
model User {
  id              String      @id @default(uuid())

  email           String      @unique
  password        String      
  tier            String      @default("Free")
  role            String      @default("Member")

  createdAt       DateTime    @default(now())

  profile         Profile?

  accounts        Account[]   @relation("AccountHolders")
  notepads        Notepad[]   @relation("NotepadAuthors")
  projects        Project[]   @relation("ProjectCollaborators")
  tasks           Task[]      @relation("TaskAssignedUsers")
  contacts        Contact[]
  
  notifications   Notification[]
  sessions        Session[]
}

model Profile {
  id              Int         @id @default(autoincrement())

  displayname     String

  user            User        @relation(fields: [userId], references: [id])
  userId          String      @unique
}

model Session {
  id              String      @id

  browser         String
  os              String
  ip              String    

  createdAt       DateTime    @default(now())
  lastUsedAt      DateTime    @default(now())

  user            User        @relation(fields: [userId], references: [id])
  userId          String    
}

model Notification {
  id              String     @id @default(uuid())

  title           String     
  type            String     @default("information")
  data            String

  user            User       @relation(fields: [userId], references: [id])
  userId          String  
}
//
// VAULT
//
model Account {
  id              String      @id @default(uuid())

  username        String?
  email           String?
  service         String
  password        String
  isShared        Boolean     @default(false)

  users           User[]      @relation("AccountHolders")
}

model Contact {
  id              String      @id @default(uuid())

  name            String
  fields          ContactFields[]

  user            User        @relation(fields: [userId], references: [id])
  userId          String
}

model ContactFields {
  id              String      @id @default(uuid())
  name            String
  value           String

  contact         Contact     @relation(fields: [contactId], references: [id])
  contactId       String    
}


//
// NOTEPADS
//
model Notepad {
  id              String      @id @default(uuid())

  title           String      @default("Untitled notepad")
  content         String?

  editedAt        DateTime    @default(now())
  createdAt       DateTime    @default(now())

  users           User[]      @relation("NotepadAuthors")

  project         Project?    @relation(fields: [projectId], references: [id])
  projectId       String
}


//
// TASKS
//
model Task {
  id              String      @id @default(uuid())

  name            String      @default("Unnamed task")
  isCompleted     Boolean     @default(false)

  users           User[]      @relation("TaskAssignedUsers")

  completeBy      DateTime

  initiative      Initiative? @relation(fields: [initiativeId], references: [id])
  initiativeId    String
}


//
// PROJECTS
//
model Project {
  id              String      @id @default(uuid())

  name            String      @default("Untitled Project")

  notepads        Notepad[]
  initiatives     Initiative[]

  createdAt       DateTime    @default(now())
  
  collaborators   User[]      @relation("ProjectCollaborators")
}

model Initiative {
  id              String      @id @default(uuid())

  name            String

  tasks           Task[]
  stages          InitiativeStage[]

  project         Project     @relation(fields: [projectId], references: [id])
  projectId       String
}

model InitiativeStage {
  id              String      @id @default(uuid())

  name            String
  description     String
  colour          String      @default("#90EE90")

  initiative      Initiative  @relation(fields: [initiativeId], references: [id])
  initiativeId    String
}